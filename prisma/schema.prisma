// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  username         String         @unique
  email            String         @unique
  contactNo        String         @unique
  password         String
  role             Role
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  admin            Admin?
  customer         Customer?
  verifications    Verification[]
  userStatus       UserStatus     @default(INACTIVE)
  roomsSent        Room[]         @relation("SenderRelation")
  roomsReceived    Room[]         @relation("ReceiverRelation")
  roomParticipants RoomUser[]
  chatsSent        Chat[]         @relation("SenderRelation")
  chatsReceived    Chat[]         @relation("ReceiverRelation")
  createdRooms     Room[]         @relation("CreatorRelation")
  notifications    Notification[]

  @@unique([username, email, contactNo])
  @@map("users")
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  userId    String   @db.ObjectId
  otp       Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verifications")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  fullName  String
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  firstName String?
  lastName  String?
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]

  @@map("customers")
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]

  @@map("categories")
}

model Question {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answers    Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  answer     Int
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("answers")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  description String
  location    String?
  date        DateTime
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]

  @@map("events")
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  eventId   String?  @db.ObjectId
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  img         String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     String?  @db.ObjectId

  @@map("blogs")
}

model RoomUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roomId])
  @@map("room_users")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        RoomType @default(GROUP) // Type: One-to-one or Group chat
  name        String? // Name of the group (for group chats)
  description String? // Description of the group (for group chats)  
  img         String? // Image of the group (for group chats)
  senderId    String?  @db.ObjectId
  receiverId  String?  @db.ObjectId
  creatorId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender   User? @relation("SenderRelation", fields: [senderId], references: [id])
  receiver User? @relation("ReceiverRelation", fields: [receiverId], references: [id])
  creator  User  @relation("CreatorRelation", fields: [creatorId], references: [id])

  participants RoomUser[] // Relationship to participants (RoomUser table)
  chat         Chat[]
  userId       String?    @db.ObjectId

  @@map("rooms")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String?  @db.ObjectId // Nullable for group chats
  roomId     String   @db.ObjectId
  message    String
  images     String[]
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationshipsb
  sender   User  @relation("SenderRelation", fields: [senderId], references: [id])
  receiver User? @relation("ReceiverRelation", fields: [receiverId], references: [id]) // Optional for group chats
  room     Room  @relation(fields: [roomId], references: [id])

  @@map("chats")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

enum PayoutStatus {
  COMPLETED
  PROCESSED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RoomType {
  PRIVATE
  GROUP
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  REQUIRES_CAPTURE
  CANCELED
  SUCCEEDED
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum Currency {
  USD
  EUR
  GBP
  AUD
  CAD
  JPY
}
