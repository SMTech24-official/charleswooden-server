// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  email         String         @unique
  contactNo     String         @unique
  password      String
  role          Role
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  admin         Admin?
  customer      Customer?
  verifications Verification[]
  userStatus    UserStatus     @default(ACTIVE)
  notifications Notification[]

  @@unique([username, email, contactNo])
  @@map("users")
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  userId    String   @db.ObjectId
  otp       Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verifications")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  fullName  String
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  userId             String             @unique @db.ObjectId
  location           String?
  preference         DietaryPreference?
  user               User               @relation(fields: [userId], references: [id])
  answers            Answer[]
  subscriptions      Subscription[]
  stripeCustomerId   String?            @unique
  planName           PlanName           @default(FREE)
  partnerOneName     String
  partnerTwoName     String
  email              String?
  coupleType         CoupleType?
  children           Int?
  grandChildren      Int?
  address            String?
  contactNo          String?
  childrenAgeGroup   ChildrenAgeGroup?
  industry           String?
  birthDate          DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  payments           Payment[]
  relationShipStatus RelationshipStatus
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  bookings           Booking[]

  @@map("customers")
}

model SubscriptionPlan {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  plan                 SubscribePlan          @default(MONTH) // Monthly or Yearly
  status               SubscriptionPlanStatus @default(ACTIVE)
  planName             PlanName               @default(FREE)
  description          String
  trialPeriod          Boolean                @default(true) // Is 14-day free trial included?
  price                Float                  @default(0) // Subscription price
  stripePriceId        String                 @default("") // Stripe price reference
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  enrolledSubscription Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  customerId           String             @db.ObjectId // Reference to User
  subscriptionPlanId   String             @db.ObjectId // Reference to Subscription
  subscriptionStatus   SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String
  stripeCustomerId     String
  expiresAt            DateTime
  createdAt            DateTime           @default(now())
  cancelRequest        Boolean            @default(false)
  // Relationships
  customer             Customer           @relation(fields: [customerId], references: [id]) // Foreign Key relation to User
  subscriptionPlan     SubscriptionPlan   @relation(fields: [subscriptionPlanId], references: [id]) // Foreign Key relation to Subscription
  payments             Payment[]

  @@unique([customerId, subscriptionPlanId])
  @@map("subscriptions")
}

model Payment {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId         String        @db.ObjectId // Reference to User
  amount             Float
  currency           String
  paymentDate        DateTime
  paymentStatus      PaymentStatus
  paymentSource      PaymentSource @default(SUBSCRIPTION)
  bookingId          String?       @unique @db.ObjectId
  subscriptionId     String?       @db.ObjectId
  subscriptionPlanId String?       @db.ObjectId
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  customer           Customer      @relation(fields: [customerId], references: [id])
  subscription       Subscription? @relation(fields: [subscriptionId], references: [id])
  booking            Booking?      @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]

  @@map("categories")
}

model Question {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answers    Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  answer     Int
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([customerId, questionId])
  @@map("answers")
}

model Event {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String    @unique
  description     String
  location        String?
  estimatedBudget String
  date            DateTime
  startTime       String
  endTime         String
  entryFee        Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  images          Image[]
  reviews         Review[]
  bookings        Booking[]

  @@map("events")
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String        @db.ObjectId
  eventId       String        @db.ObjectId
  customer      Customer      @relation(fields: [customerId], references: [id])
  event         Event         @relation(fields: [eventId], references: [id])
  status        BookingStatus
  paymentSource PaymentSource @default(SUBSCRIPTION)
  payments      Payment?

  @@map("bookings")
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  eventId   String?  @db.ObjectId
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?  @db.ObjectId

  @@map("images")
}

model Review {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  content String
  images  Image[]
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String? @db.ObjectId

  @@map("reviews")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  img         String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  title     String
  body      String
  data      String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum PaymentSource {
  SUBSCRIPTION
  SINGLE
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

enum PayoutStatus {
  COMPLETED
  PROCESSED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BLOCKED
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RoomType {
  PRIVATE
  GROUP
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  REQUIRES_CAPTURE
  CANCELED
  SUCCEEDED
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum Currency {
  USD
  EUR
  GBP
  AUD
  CAD
  JPY
}

enum NotificationRole {
  MEMBER
  ADMIN
}

enum PlanName {
  FREE
  EDGE
  VISIONARY
  QUANTUM
}

enum MemberSubscriptionStatus {
  NONE
  ACTIVE
  EXPIRED
  PENDING
}

enum SubscriptionPlanStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
  PAST_DUE
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum SubscribePlan {
  MONTH
  YEAR
}

enum EngagementTime {
  MORNING
  AFTERNOON
  EVENING
}

enum NotificationType {
  SUBSCRIPTION_REMINDER
  GROUP_ASSIGNMENT
  MEMBER_REGISTERED
  POST_ENGAGEMENT
  TRAINING_REQUESTED
  NEED_HELP_REQUESTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum ChildrenAgeGroup {
  INFANT // 0-1 years
  TODDLER // 1-3 years
  PRESCHOOL // 3-5 years        
  SCHOOL_AGE // 6-12 years
  TEEN // 13-17 years
  ADULT // 18+ years
}

enum RelationshipStatus {
  SINGLE
  IN_RELATIONSHIP
  MARRIED
  SEPARATED
  DIVORCED
  WIDOWED
}

enum CoupleType {
  MF
  FF
  MM
  OTHER
}

enum BookingStatus {
  ACTIVE
  CANCELLED
  PENDING
}

enum DietaryPreference {
  OMNIVORE
  VEGETARIAN
  VEGAN
  PESCATARIAN
  KETO
  PALEO
  HALAL
  KOSHER
  GLUTEN_FREE
  DAIRY_FREE
  NUT_FREE
  OTHER
}
