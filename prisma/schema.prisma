// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  username         String         @unique
  email            String         @unique
  contactNo        String         @unique
  password         String
  role             Role
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  admin            Admin?
  customer         Customer?
  verifications    Verification[]
  userStatus       UserStatus     @default(INACTIVE)
  roomsSent        Room[]         @relation("SenderRelation")
  roomsReceived    Room[]         @relation("ReceiverRelation")
  roomParticipants RoomUser[]
  chatsSent        Chat[]         @relation("SenderRelation")
  chatsReceived    Chat[]         @relation("ReceiverRelation")
  createdRooms     Room[]         @relation("CreatorRelation")
  notifications    Notification[]

  @@map("users")
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  userId    String   @db.ObjectId
  otp       Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verifications")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  fullName  String
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @unique @db.ObjectId
  firstName       String?
  lastName        String?
  location        String?
  user            User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  TourBooking     TourBooking[]
  FeedBack        FeedBack[]
  vehicleBookings VehicleBooking[]
  roomBookings    RoomBooking[]
  transactions    Transaction[]

  @@map("customers")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Vehicle {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  vehicleType VehicleType
  pricePerHR  Float
  img         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("vehicles")
}

model Image {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tourPackageId  String?       @db.ObjectId
  hotelPackageId String?       @db.ObjectId
  tourPackages   TourPackage?  @relation(fields: [tourPackageId], references: [id])
  hotelPackage   HotelPackage? @relation(fields: [hotelPackageId], references: [id])

  @@map("images")
}

model TourPackage {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  slug             String
  location         String
  tourType         String // private, luxury, small group
  category         TourPackageCategory
  duration         Int
  price            Float
  images           Image[]
  isVehicleService Boolean             @default(false)
  vehicleType      TourVehicleType?
  vehicleDuration  Int?
  vehiclePrice     Float?
  tourBookings     TourBooking[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@map("tour_packages")
}

model HotelPackage {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  slug          String
  roomCategory  String
  duration      String
  price         Float
  bedRoom       Int
  bathRoom      Int
  livingRoom    Int
  kitchen       Int
  images        Image[]
  hotelBookings RoomBooking[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("hotel_packages")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  img         String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     String?  @db.ObjectId

  @@map("blogs")
}

model TourBooking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  tourPackageId String        @db.ObjectId
  tourPackage   TourPackage   @relation(fields: [tourPackageId], references: [id])
  availableDate DateTime
  duration      Int
  groupSize     Int
  guests        Guest[]
  customerId    String        @db.ObjectId
  customer      Customer      @relation(fields: [customerId], references: [id])
  isCancelled   Boolean       @default(false)
  cancelReason  String?
  isPaid        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  feedBacks     FeedBack[]
  transactions  Transaction[]

  @@map("tour_bookings")
}

model Guest {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  email          String
  isAdult        Boolean
  age            Int
  contactNo      String
  requestMessage String
  tourBookingId  String?      @db.ObjectId
  tourBooking    TourBooking? @relation(fields: [tourBookingId], references: [id])
  roomBookingId  String?      @db.ObjectId
  roomBooking    RoomBooking? @relation(fields: [roomBookingId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("guests")
}

model VehicleBooking {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  pickUpAddr           String
  pickUpDate           DateTime
  pickUpTime           String
  vehicleType          String
  restaurant           String // drinking restaurant name
  address              String // drinking restaurant location
  expTimeSty           String // 5 hours, 2 hours
  sameCarReturn        Boolean
  dropOffAddr          String
  needsAdditionalStops Boolean
  customerId           String   @db.ObjectId
  customer             Customer @relation(fields: [customerId], references: [id])
  isCancelled          Boolean  @default(false)
  cancellReason        String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("vehicle_bookings")
}

model RoomBooking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  checkInDate    DateTime
  checkOutDate   DateTime
  numberOfGuests Int
  roomType       String // deluxe                        
  guests         Guest[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isCancelled    Boolean       @default(false)
  cancelReason   String?
  customerId     String        @db.ObjectId
  isPaid         Boolean       @default(false)
  customer       Customer      @relation(fields: [customerId], references: [id])
  feedBacks      FeedBack[]
  transactions   Transaction[]
  HotelPackage   HotelPackage? @relation(fields: [hotelPackageId], references: [id])
  hotelPackageId String?       @db.ObjectId

  @@map("room_bookings")
}

model Transaction {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  amount                Float
  currency              Currency
  billingAddress        Json?
  stripePaymentIntentId String?
  clientSecret          String?
  paymentMethodId       String?
  status                PaymentStatus
  tourBookingId         String?       @db.ObjectId
  tourBoooking          TourBooking?  @relation(fields: [tourBookingId], references: [id])
  roomBookingId         String?       @db.ObjectId
  roomBooking           RoomBooking?  @relation(fields: [roomBookingId], references: [id])
  customerId            String        @db.ObjectId
  customer              Customer      @relation(fields: [customerId], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("transactions")
}

model FeedBack {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  tourBookingId String?      @db.ObjectId
  tourBoooking  TourBooking? @relation(fields: [tourBookingId], references: [id])
  roomBookingId String?      @db.ObjectId
  roomBooking   RoomBooking? @relation(fields: [roomBookingId], references: [id])
  customerId    String       @db.ObjectId
  customer      Customer     @relation(fields: [customerId], references: [id])
  rating        Float
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("reviews")
}

model RoomUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roomId])
  @@map("room_users")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        RoomType @default(GROUP) // Type: One-to-one or Group chat
  name        String? // Name of the group (for group chats)
  description String? // Description of the group (for group chats)  
  img         String? // Image of the group (for group chats)
  senderId    String?  @db.ObjectId
  receiverId  String?  @db.ObjectId
  creatorId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender   User? @relation("SenderRelation", fields: [senderId], references: [id])
  receiver User? @relation("ReceiverRelation", fields: [receiverId], references: [id])
  creator  User  @relation("CreatorRelation", fields: [creatorId], references: [id])

  participants RoomUser[] // Relationship to participants (RoomUser table)
  chat         Chat[]
  userId       String?    @db.ObjectId

  @@map("rooms")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String?  @db.ObjectId // Nullable for group chats
  roomId     String   @db.ObjectId
  message    String
  images     String[]
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationshipsb
  sender   User  @relation("SenderRelation", fields: [senderId], references: [id])
  receiver User? @relation("ReceiverRelation", fields: [receiverId], references: [id]) // Optional for group chats
  room     Room  @relation(fields: [roomId], references: [id])

  @@map("chats")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DRIVER
  DELIVERYMAN
  CUSTOMER
}

enum PayoutStatus {
  COMPLETED
  PROCESSED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RoomType {
  PRIVATE
  GROUP
}

enum TourPackageCategory {
  SEA_TOUR
  LAND_TOUR
  CULTURAL_TOUR
  GASTRO_WINE_TOUR
}

model Book {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  img         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("books")
}

enum BookingStatus {
  PENDING
  OFFERED
  ASSIGNED_TO_DRIVER
  ASSIGNED_TO_DELIVERYMAN
  COMPLETED
  CANCELLED
  REJECTED
}

enum TourVehicleType {
  BOAT
  CAR
}

enum VehicleType {
  BOAT
  CAR
  VAN
  AIRCRAFT
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  REQUIRES_CAPTURE
  CANCELED
  SUCCEEDED
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum Currency {
  USD
  EUR
  GBP
  AUD
  CAD
  JPY
}
